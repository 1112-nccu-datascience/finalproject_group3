---
title: ""
subtitle: ""
author: "第三組"
date: \today
output: html_document
---

載入所需套件
```{r warning=FALSE}
library(xgboost)
library(rattle)
library(wesanderson)
library(ggbiplot)
library(ROCit)
library(caret)
library(gtsummary)
library(ggvis)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(ggthemes)
library(ggstatsplot)
library(plotly)
library(readxl)
library(rstatix)
library(magrittr)
library(rgl)
library(ggfittext)
library(DescrTab2)
library(neuralnet)
library(RColorBrewer)
library(viridis)
library(summarytools)
library(DataExplorer)
library(baguette)
library(recipeselectors)
library(lime)
library(shapviz)
library(usemodels)
# library(ModelMetrics)
```

載入資料集
```{r}
esigned <- read_csv("../data/P39-Financial-Data.csv")
```

設定變數型別
```{r}
esigned %<>% mutate(entry_id = as.character(entry_id), home_owner = as.factor(home_owner), has_debt = as.factor(has_debt), e_signed = as.factor(e_signed))
```

```{r}
esigned %<>% select(-entry_id)
```

檢視統計資料
```{r}
esigned %>% dfSummary()
esigned %>% skimr::skim()
```

以年齡做分組統計人數
```{r}
(ggplot(esigned, aes(x = age)) +
geom_histogram(binwidth = 10, fill = "orange") + 
geom_freqpoly(binwidth = 10) + 
geom_text(aes(label = ..count..), stat = "bin", binwidth = 10) + 
theme_economist_white()) %>% 
ggplotly()
```

以收入做分組統計人數
```{r}
(ggplot(esigned, aes(x = income)) +
geom_histogram(binwidth = 2000, fill = "purple") + 
geom_freqpoly(binwidth = 2000) + 
geom_text(aes(label = ..count..), stat = "bin", binwidth = 2000) + 
theme_economist_white()) %>% 
ggplotly()
```

年齡密度圖
```{r}
ggplot(esigned) + 
geom_density(aes(x = age))
```

付款計畫長條圖圓餅圖
```{r}
(ggplot(esigned, aes(x = pay_schedule, fill = pay_schedule)) +
geom_bar() + 
scale_fill_brewer(palette = "Accent") + 
geom_text(aes(label = ..count..), stat = "count")) %>% 
ggplotly()
```

付款計畫圓餅圖
```{r}
ggplot(esigned, aes(x = "", fill = pay_schedule)) +
geom_bar() + 
coord_polar(theta = "y") + 
scale_fill_brewer(palette = "Accent") + 
theme_void()
```

以年齡做分組的收入箱型圖
```{r}
ggplot(esigned, aes(x = cut_width(age, 10), y = income)) +
geom_boxplot(notch = TRUE, fill = "pink") + 
xlab("age") +
theme_economist_white()
```

以收入做分組的貸款箱型圖
```{r}
ggplot(esigned, aes(x = cut_width(income, 2000), y = amount_requested)) +
geom_boxplot(notch = TRUE, fill = "yellow") + 
xlab("income") + 
theme_economist_white()
```

```{r}
ggplot(esigned) + 
aes(x = cut_width(income, 2000), fill = home_owner) + 
xlab("income") + 
ylab("percent") + 
geom_bar(position = "fill") +
scale_fill_brewer(palette = "Set1")

ggplot(esigned) + 
aes(x = cut_width(income, 2000), fill = has_debt) + 
xlab("income") + 
ylab("percent") + 
geom_bar(position = "fill") +
scale_fill_brewer(palette = "Set1")

ggplot(esigned) + 
aes(x = cut_width(age, 10), fill = home_owner) + 
xlab("income") + 
ylab("percent") + 
geom_bar(position = "fill") +
scale_fill_brewer(palette = "Set1")

ggplot(esigned) + 
aes(x = cut_width(age, 10), fill = has_debt) + 
xlab("income") + 
ylab("percent") + 
geom_bar(position = "fill") +
scale_fill_brewer(palette = "Set1")
```

```{r}
ggplot(esigned) + 
aes(x = age, y = income, color = has_debt, size = amount_requested) + 
geom_point() + 
scale_color_manual(values = brewer.pal(3, "Set1"))
```

```{r}
ggplot(esigned) +
aes(x = amount_requested, y = risk_score) +
geom_hex() + 
paletteer::scale_fill_paletteer_c(palette = "pals::kovesi.cyclic_mygbm_30_95_c78")
```

```{r}
plot_correlation(esigned %>% select(income, amount_requested, years_employed, risk_score, risk_score_2, risk_score_3, risk_score_4, risk_score_5))
```

```{r}
ggplot(esigned) +
geom_point(aes(x = amount_requested, y = risk_score, colour = e_signed, shape = has_debt, size = age)) + geom_smooth(aes(x = amount_requested, y = risk_score, colour = e_signed), method = lm)
```

```{r}
plot_ly(esigned, x = ~income, y = ~amount_requested, z = ~risk_score)
```



ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir, center = TRUE, scale. = TRUE)

ir.ca <- reactive(CA(iris[1:input$n, 1:4], graph = FALSE))



rec <- recipe(~., data = esigned)
pca_trans <- rec %>%
  step_normalize(all_numeric()) %>%
  step_pca(all_numeric(), num_comp = 5)
pca_estimates <- prep(pca_trans, training = esigned)
pca_data <- bake(pca_estimates, esigned)


```{r}
esigned.e_signed <- esigned %>% select(e_signed)
numeric.esigned <- esigned %>% select(is.numeric)
esigned.pca <- prcomp(numeric.esigned, center = TRUE, scale. = TRUE)
g <- ggbiplot(esigned.pca, choices = c(1, 2), obs.scale = 1, var.scale = 1, ellipse = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top', plot.background = element_rect(fill='transparent', color=NA), legend.background = element_rect(fill='transparent', color=NA))
g
```

```{r}
pca_data
```

```{r}
esigned_split <- initial_split(esigned, prop = 0.80, strata = e_signed)
esigned_train <- training(esigned_split)
esigned_test <- testing(esigned_split)
dim(esigned_train)
train_folds <- vfold_cv(esigned_train, v = 10)
```

使用決策樹分類
```{r}
decision_tree_rpart_spec <-
  decision_tree() %>%
  set_engine('rpart') %>% 
  set_mode('classification')

decision_tree_wflow <- workflow() %>%
  add_model(decision_tree_rpart_spec) %>%
  add_formula(e_signed ~ .)

fitted_decision_tree <- fit(decision_tree_wflow, data = esigned_train)
```

決策樹，訓練集效能
```{r}
decision_tree_predict_value <- predict(fitted_decision_tree, esigned_train, type = "prob")
decision_tree_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = decision_tree_predict_value$.pred_1, class = esigned_train$e_signed))
plot(ROCit_obj)

decision_tree_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_train$e_signed, estimate = decision_tree_predict_value$.pred_class)

caret::confusionMatrix(data = decision_tree_predict_value$.pred_class, reference = esigned_train$e_signed, positive = "1", mode = "everything")
```

決策樹，測試集效能
```{r}
decision_tree_predict_value <- predict(fitted_decision_tree, esigned_test, type = "prob")
decision_tree_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = decision_tree_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

decision_tree_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = decision_tree_predict_value$.pred_class)

caret::confusionMatrix(data = decision_tree_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```

交叉驗證
```{r}
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)

decision_tree_cv <- decision_tree_wflow %>% 
  fit_resamples(resamples = train_folds, control = keep_pred, metrics = metric_set(accuracy, f_meas, roc_auc))

decision_tree_cv %>% collect_metrics(summarize = FALSE)
```

畫出決策樹
```{r}
fitted_decision_tree %>% extract_fit_engine() %>% fancyRpartPlot(sub = "", palettes = "Set3")
```

XGBoost
```{r}
boost_tree_xgboost_spec <-
  boost_tree() %>%
  set_engine('xgboost') %>%
  set_mode('classification')

xgboost <- workflow() %>%
  add_model(boost_tree_xgboost_spec) %>% 
  add_formula(e_signed ~ .)

fitted_xgboost <- fit(xgboost, data = esigned_train)
```

XGBoost 訓練集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost, esigned_train, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_train$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_train$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_train$e_signed, positive = "1", mode = "everything")

# shapviz(object = extract_fit_engine(fitted_xgboost) , X_pred = as.matrix(esigned_test %>% select(is.numeric)))
```

XGBoost 測試集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost, esigned_test, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")

#shapviz(object = extract_fit_engine(fitted_xgboost) , X_pred = as.matrix(esigned_test %>% select(is.numeric)))
```

畫出 XGBoost
```{r}
fitted_xgboost %>% extract_fit_engine() %>% xgb.plot.tree(model = . , trees = 1)
```

支持向量機（SVM）
```{r}
svm_rbf_kernlab_spec <-
  svm_rbf() %>%
  set_engine('kernlab') %>%
  set_mode('classification')

kernlab_workflow <- 
  workflow() %>% 
  add_formula(formula = e_signed ~ .) %>% 
  add_model(svm_rbf_kernlab_spec) 

fitted_kernlab <- fit(kernlab_workflow, data = esigned_train)
```

SVM 訓練集效能
```{r}
svm_predict_value <- predict(fitted_kernlab, esigned_train, type = "prob")
svm_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = svm_predict_value$.pred_1, class = esigned_train$e_signed))
plot(ROCit_obj)

svm_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_train$e_signed, estimate = svm_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = svm_predict_value$.pred_class, reference = esigned_train$e_signed, positive = "1", mode = "everything")
```

SVM 測試集效能
```{r}
svm_predict_value <- predict(fitted_kernlab, esigned_test, type = "prob")
svm_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = svm_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

svm_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = svm_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = svm_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```

KNN
```{r}
nearest_neighbor_kknn_spec <-
  nearest_neighbor() %>%
  set_engine('kknn') %>%
  set_mode('classification')

kknn_workflow <- 
  workflow() %>% 
  add_formula(formula = e_signed ~ .) %>% 
  add_model(nearest_neighbor_kknn_spec) 

fitted_kknn <- fit(kknn_workflow, data = esigned_train)
```

KNN 訓練集效能
```{r}
knn_predict_value <- predict(fitted_kknn, esigned_train, type = "prob")
knn_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = knn_predict_value$.pred_1, class = esigned_train$e_signed))
plot(ROCit_obj)

knn_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_train$e_signed, estimate = knn_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = knn_predict_value$.pred_class, reference = esigned_train$e_signed, positive = "1", mode = "everything")
```

KNN 測試集效能
```{r}
knn_predict_value <- predict(fitted_kknn, esigned_test, type = "prob")
knn_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = knn_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

knn_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = knn_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = knn_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```


示範網格搜索調整 XGBoost 超參數
```{r}
boost_tree_xgboost_spec <-
  boost_tree(tree_depth = tune(), trees = tune()) %>%
  set_engine('xgboost') %>%
  set_mode('classification')

xgboost_wflow <- workflow() %>%
  add_model(boost_tree_xgboost_spec) %>%
  add_formula(e_signed ~ .)
  
xgboost_tune <- xgboost_wflow %>%
  tune_grid(train_folds, grid = crossing(tree_depth = c(5, 10, 20), trees = c(10, 200)), metrics = metric_set(accuracy, f_meas))

# show_best(xgboost_tune)
xgboost_wflow <- xgboost_wflow %>% finalize_workflow(select_best(xgboost_tune, metric = "accuracy"))

fitted_xgboost <- fit(xgboost_wflow, data = esigned_train)
```

XGBoost 訓練集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost, esigned_train, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_train$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_train$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_train$e_signed, positive = "1", mode = "everything")
```

XGBoost 測試集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost, esigned_test, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```

示範使用 recipe 進行數據前處理，並觀察轉換後的樣子
```{r}
rec <- recipe(e_signed ~ ., data = esigned) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>%
  step_string2factor(one_of("pay_schedule")) %>% 
  step_novel(all_nominal_predictors()) %>% 
  step_dummy(all_nominal_predictors(), one_hot = TRUE) %>% 
  step_zv(all_predictors()) 

esigned_transform <- prep(rec, training = esigned)
esigned_transform_data <- bake(esigned_transform, esigned)
esigned_transform_data
```

```{r}
xgboost_with_preprocess <- workflow() %>%
  add_recipe(rec) %>%
  add_model(boost_tree_xgboost_spec) %>%
  finalize_workflow(select_best(xgboost_tune, metric = "accuracy"))
  
fitted_xgboost_with_preprocess <- fit(xgboost_with_preprocess, esigned_train)
```

XGBoost 訓練集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost_with_preprocess, esigned_train, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_train$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_train$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_train$e_signed, positive = "1", mode = "everything")
```

XGBoost 測試集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost_with_preprocess, esigned_test, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```

使用 Feature Selection 預處理資料，訓練 XGBoost
```{r}
rec <- recipe(e_signed ~., data = esigned)
lasso_recipe <- rec %>% step_rm(all_nominal_predictors()) %>% step_select_linear(all_predictors(), outcome = "e_signed", top_p = 5, engine = "glmnet", penalty = 0.1, mixture = 1)
lasso_estimates <- prep(lasso_recipe, training = esigned)
lasso_data <- bake(lasso_estimates, esigned)
```

```{r}
xgboost_with_lasso <- workflow() %>%
  add_recipe(lasso_recipe) %>%
  add_model(boost_tree_xgboost_spec) %>%
  finalize_workflow(select_best(xgboost_tune, metric = "accuracy"))
  
fitted_xgboost_with_lasso <- fit(xgboost_with_lasso, esigned_train)
```

XGBoost 訓練集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost_with_lasso, esigned_train, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_train$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_train$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_train$e_signed, positive = "1", mode = "everything")
```

XGBoost 測試集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost_with_lasso, esigned_test, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```

```{r}
rec <- recipe(e_signed ~., data = esigned)
mrmr_recipe <- rec %>% step_select_mrmr(all_predictors(), outcome = "e_signed", top_p = 5) %>% step_rm(all_nominal_predictors())
mrmr_estimates <- prep(mrmr_recipe, training = esigned)
mrmr_data <- bake(mrmr_estimates, esigned)
```

```{r}
xgboost_with_mrmr <- workflow() %>%
  add_recipe(mrmr_recipe) %>%
  add_model(boost_tree_xgboost_spec) %>%
  finalize_workflow(select_best(xgboost_tune, metric = "accuracy"))
  
fitted_xgboost_with_mrmr <- fit(xgboost_with_mrmr, esigned_train)
```

XGBoost 訓練集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost_with_mrmr, esigned_train, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_train$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_train$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_train$e_signed, positive = "1", mode = "everything")
```

XGBoost 測試集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost_with_mrmr, esigned_test, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```


```{r}
rec <- recipe(e_signed ~., data = esigned)
bortua <- rec %>% step_select_boruta(all_predictors(), outcome = "e_signed")
bortua_estimates <- prep(bortua, training = esigned)
bortua_data <- bake(bortua_estimates, esigned)
bortua_data
```

```{r}
xgboost_with_boruta <- workflow() %>%
  add_recipe(rec) %>%
  add_model(boost_tree_xgboost_spec) %>%
  finalize_workflow(select_best(xgboost_tune, metric = "accuracy"))
  
fitted_xgboost_with_boruta <- fit(xgboost_with_boruta, esigned_train)
```

XGBoost 訓練集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost_with_boruta, esigned_train, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_train$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_train$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_train$e_signed, positive = "1", mode = "everything")
```

XGBoost 測試集效能
```{r}
xgboost_predict_value <- predict(fitted_xgboost_with_boruta, esigned_test, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```



```{r}
```

```{r}

```


```{r}
rec <- recipe(e_signed ~., data = esigned)
bortua <- rec %>% step_select_boruta(all_predictors(), outcome = "e_signed")
bortua_estimates <- prep(bortua, training = esigned)
bortua_data <- bake(bortua_estimates, esigned)
```

```{r}
explainer <- lime::lime(x = esigned %>% dplyr::select(-e_signed), model = (fitted_decision_tree %>% extract_fit_engine() %>% as_classifier()))
explaination <- lime::explain(esigned %>% dplyr::select(-e_signed), explainer, n_labels = 2, n_features = 20)
```

```{r}
logistic_reg_glmnet_spec <-
  logistic_reg(penalty = 0.1, mixture = 1) %>%
  set_engine('glmnet') %>% 
  set_mode('classification')

lasso <- workflow() %>%
  add_model(logistic_reg_glmnet_spec) %>%
  add_formula(e_signed ~ .)

fitted_lasso <- fit(lasso, data = esigned)
lasso_predict_value <- predict(fitted_lasso, esigned, type = "prob")
lasso_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = lasso_predict_value$.pred_1, class = esigned$e_signed))
plot(ROCit_obj)

caret::confusionMatrix(data = lasso_predict_value$.pred_class, reference = esigned$e_signed, positive = "1", mode = "everything")
```

```{r}
rec <- recipe(e_signed ~., data = esigned)
mrmr <- rec %>% step_select_mrmr(all_predictors(), outcome = "e_signed", top_p = 5)
mrmr_estimates <- prep(mrmr, training = esigned)
mrmr_data <- bake(mrmr_estimates, esigned)
```

```{r}
rec <- recipe(e_signed ~., data = esigned)
lllll <- rec %>% step_rm(all_nominal_predictors()) %>% step_select_linear(all_predictors(), outcome = "e_signed", top_p = 5, engine = "glmnet", penalty = 0.1, mixture = 1)
lllll_estimates <- prep(lllll, training = esigned)
lllll_data <- bake(lllll_estimates, esigned)
```

```{r}
decision_tree_rpart_spec <-
  decision_tree() %>%
  set_engine('rpart') %>% 
  set_mode('classification')

decision_tree <- workflow() %>%
  add_recipe(lllll) %>% 
  add_model(decision_tree_rpart_spec)

fitted_decision_tree <- fit(decision_tree, data = esigned_train)
decision_tree_predict_value <- predict(fitted_decision_tree, esigned_test, type = "prob")
decision_tree_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = decision_tree_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

decision_tree_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = decision_tree_predict_value$.pred_class)

caret::confusionMatrix(data = decision_tree_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```

```{r}
boost_tree_xgboost_spec <-
  boost_tree() %>%
  set_engine('xgboost') %>%
  set_mode('classification')

xgboost <- workflow() %>%
  add_model(boost_tree_xgboost_spec) %>% 
  add_formula(e_signed ~ .)

fitted_xgboost <- fit(xgboost, data = esigned_train)
xgboost_predict_value <- predict(fitted_xgboost, esigned_test, type = "prob")
xgboost_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = xgboost_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

xgboost_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = xgboost_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = xgboost_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")

shapviz(object = extract_fit_engine(fitted_xgboost) , X_pred = as.matrix(esigned_test %>% select(is.numeric)))
```

```{r}
gen_additive_mod_mgcv_spec <-
  gen_additive_mod(select_features = tune()) %>%
  set_engine("mgcv") %>%
  set_mode("classification")

tune_gam <- workflow() %>%
  add_model(gen_additive_mod_mgcv_spec, formula = e_signed ~ .) %>%
  add_formula(e_signed ~ .) %>%
  tune_grid(train_folds, grid = crossing(select_features = c(5, 10, 20)), metrics = metric_set(accuracy))

gam <- workflow() %>%
  add_model(gen_additive_mod_mgcv_spec, formula = e_signed ~ .) %>%
  add_formula(e_signed ~ .) %>%
  finalize_workflow(select_best(tune_gam, "accuracy"))

fitted_gam <- fit(xgboost, data = esigned_train)
gam_predict_value <- predict(fitted_gam, esigned_test, type = "prob")
gam_predict_value %<>% mutate(`.pred_class` = as.factor(ifelse(.pred_1 > .pred_0, 1, 0)))

(ROCit_obj <- rocit(score = gam_predict_value$.pred_1, class = esigned_test$e_signed))
plot(ROCit_obj)

gam_predict_value %>% metric_set(yardstick::precision, yardstick::recall, yardstick::f_meas)(truth = esigned_test$e_signed, estimate = gam_predict_value$.pred_class, event_level = "second")

caret::confusionMatrix(data = gam_predict_value$.pred_class, reference = esigned_test$e_signed, positive = "1", mode = "everything")
```